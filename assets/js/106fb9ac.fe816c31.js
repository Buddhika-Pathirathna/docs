"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[478],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),u=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),f=r,h=d["".concat(c,".").concat(f)]||d[f]||l[f]||o;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},622:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return l}});var a=n(3117),r=n(102),o=(n(7294),n(3905)),s=["components"],i={},c="Listing CSPR on Your Exchange",u={unversionedId:"dapp-dev-guide/list-cspr",id:"dapp-dev-guide/list-cspr",title:"Listing CSPR on Your Exchange",description:"This topic describes how to list Casper token (CSPR) on a cryptocurrency exchange.",source:"@site/source/docs/casper/dapp-dev-guide/list-cspr.md",sourceDirName:"dapp-dev-guide",slug:"/dapp-dev-guide/list-cspr",permalink:"/dapp-dev-guide/list-cspr",editUrl:"https://github.com/casper-network/docs/tree/main/source/docs/casper/dapp-dev-guide/list-cspr.md",tags:[],version:"current",frontMatter:{},sidebar:"dapp-dev-guide",previous:{title:"CLType",permalink:"/dapp-dev-guide/sdkspec/types_cl"},next:{title:"Sending Deploys to the Network",permalink:"/dapp-dev-guide/building-dapps/sending-deploys"}},p={},l=[{value:"Setting up a Node",id:"setting-up-a-node",level:2},{value:"Casper Account",id:"casper-account",level:2},{value:"Understanding Basic Transactions",id:"understanding-basic-transactions",level:2},{value:"Native transfer",id:"native-transfer",level:3},{value:"Bulk or batched Wasm transfer",id:"bulk-or-batched-wasm-transfer",level:3},{value:"Integrating CSPR",id:"integrating-cspr",level:2},{value:"Testing the Integration",id:"testing-the-integration",level:2},{value:"The Casper Protocol",id:"the-casper-protocol",level:2}],d={toc:l};function f(e){var t=e.components,n=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"listing-cspr-on-your-exchange"},"Listing CSPR on Your Exchange"),(0,o.kt)("p",null,"This topic describes how to list Casper token (CSPR) on a cryptocurrency exchange."),(0,o.kt)("p",null,"CSPR is listed on ",(0,o.kt)("a",{parentName:"p",href:"https://tokenmarketcaps.com/coins/casper/market"},"many exchanges")," worldwide. It usually takes 1 to 3 days to list CSPR on an exchange."),(0,o.kt)("h2",{id:"setting-up-a-node"},"Setting up a Node"),(0,o.kt)("p",null,"While it is not necessary for an exchange to operate their own node on the Casper Network, we recommend that they do so if they expect to handle moderate to high volumes of transaction activity. A node operated by an exchange does not have to be a validating node, it can be read-only. For setup instructions, see ",(0,o.kt)("a",{parentName:"p",href:"/operators/setup"},"Basic Node Setup"),"."),(0,o.kt)("p",null,"This setup enables you to have a self-administered gateway to the Casper Network to get data and submit transactions."),(0,o.kt)("h2",{id:"casper-account"},"Casper Account"),(0,o.kt)("p",null,"You will need a Casper Account to handle the transactions on an exchange. Casper has an ",(0,o.kt)("a",{parentName:"p",href:"/design/accounts"},"Account model")," and instructions on how to ",(0,o.kt)("a",{parentName:"p",href:"/design/accounts/#accounts-creating"},"create an Account"),"."),(0,o.kt)("p",null,"For your exchange, you would need at least one Account. The Casper Network uses an Account model that holds on to general resources as well as tokens and provides an on-chain identity. As an exchange if you are dealing with high-volumes of transaction activity, you might need a main account for the exchange platform and sub-accounts for other users."),(0,o.kt)("h2",{id:"understanding-basic-transactions"},"Understanding Basic Transactions"),(0,o.kt)("p",null,"We have a token and transaction model with different levels of support that ranges from convenience to robustness. Usually, when you are transferring Casper tokens between two parties, the native two-party transfer will suffice."),(0,o.kt)("p",null,"Casper supports native two-party transfers as well as bulk transfers using custom Wasm. The native transfer is ideal when you need to perform a one-to-one transfer between two accounts. Whereas, the batched Wasm transfer can be used when you are making bulk transfers. A batched Wasm transfer allows you to do multiple transfers in a single deploy, which makes it a more cost effective method."),(0,o.kt)("h3",{id:"native-transfer"},"Native transfer"),(0,o.kt)("p",null,"Native transfer can be used to transfer tokens between two accounts. For details about the native transfer command, see ",(0,o.kt)("a",{parentName:"p",href:"/workflow/transfer-workflow"},"Direct Token Transfer"),". The following command transfers 10 CSPR from ",(0,o.kt)("em",{parentName:"p"},"account A")," to ",(0,o.kt)("em",{parentName:"p"},"account B"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"casper-client transfer \\\n--id 1 \\\n--transfer-id 123456 \\\n--node-address http://<node-ip-address>:7777 \\\n--amount 10000000000 \\\n--secret-key <accountA-secret-key>.pem \\\n--chain-name casper \\\n--target-account <accountB-hex-encoded-public-key> \\\n--payment-amount 10000\n")),(0,o.kt)("h3",{id:"bulk-or-batched-wasm-transfer"},"Bulk or batched Wasm transfer"),(0,o.kt)("p",null,"Bulk or batched Wasm transfers can be used when you need to apply some logic before or after the transfer or if the transfer is conditional. You may also use them if you are doing a series of transfers between multiple accounts. Listed below are five methods for the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/casper-contract/1.4.4/casper_contract/contract_api/system/index.html"},"Rust contract API"),", which can be used in session code to achieve batched Wasm transfer:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"transfer_to_account"),": Transfers amount of motes from the default purse of the account to target account. If the target does not exist, it is created. Can be called from session code only and not a contract as a contract doesn't have a main purse."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"transfer_to_public_key"),": Transfers amount of motes from the main purse of the caller\u2019s account to the main purse of the target. If the account referenced by target does not exist, it is created. Can be called from session code only and not from a contract as a contract doesn't have a main purse."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"transfer_from_purse_to_purse"),": Transfers amount of motes from source purse to target purse. If the target does not exist, the transfer fails."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"transfer_from_purse_to_public_key"),": Transfers amount of motes from source to the main purse of target. If the account referenced by target does not exist, it is created."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"transfer_from_purse_to_account"),": Transfers amount of motes from source purse to target account. If the target does not exist, it is created.")),(0,o.kt)("p",null,"For more information on how to write session code, see ",(0,o.kt)("a",{parentName:"p",href:"/dapp-dev-guide/writing-contracts/session-code"},"Writing Session Code"),". There are equivalent ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/casper-network/casper-node/blob/e01b528db64f96fc1d3eac8b3b8e58e1337b398d/smart_contracts/contract_as/assembly/purse.ts#L135-L305"},"assembly script")," methods available. Alternatively, you can program directly against the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/casper-network/casper-node/blob/e01b528db64f96fc1d3eac8b3b8e58e1337b398d/smart_contracts/contract/src/ext_ffi.rs#L283-L370"},"ext-FFI")," methods."),(0,o.kt)("h2",{id:"integrating-cspr"},"Integrating CSPR"),(0,o.kt)("p",null,"You can integrate with the ",(0,o.kt)("a",{parentName:"p",href:"/dapp-dev-guide/sdkspec/introduction"},"JSON-RPC API")," of a node on the Casper Network. You can program directly against the RPC or if you prefer you can choose from the variety of SDK libraries that are available to use on the Casper Network see ",(0,o.kt)("a",{parentName:"p",href:"/sdk"},"SDK Libraries"),". Casper also provides a stream server that gives you real-time information about a variety of events occurring on a node. Use of the stream is optional. You might want to use this feature as you will be notified of events instead of asking periodically. For more information about various events, see ",(0,o.kt)("a",{parentName:"p",href:"/dapp-dev-guide/building-dapps/monitoring-events"},"Monitoring and Consuming Events"),"."),(0,o.kt)("h2",{id:"testing-the-integration"},"Testing the Integration"),(0,o.kt)("p",null,"Our recommended testing mechanism is to have a test environment that points at the official Casper ",(0,o.kt)("a",{parentName:"p",href:"https://testnet.cspr.live/"},"Testnet"),". Through this, you may run production like operations of your test exchange against the test environment. However, if you are not doing this and you just want to integrate with the ",(0,o.kt)("a",{parentName:"p",href:"https://cspr.live/"},"Mainnet"),", then you can do so with your own test accounts."),(0,o.kt)("p",null,"If you are not going to do a Testnet integration, then we suggest you create some additional test accounts and test the transactions on the Mainnet through your software prior to moving to the general public."),(0,o.kt)("h2",{id:"the-casper-protocol"},"The Casper Protocol"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Casper is integrated with BitGo for enterprise grade custody. If your exchange uses BitGo, support for Casper is available already."),(0,o.kt)("li",{parentName:"ul"},"Casper has an execution after consensus model, which means that transactions are executed after they are finalized. Transactions are not orphaned or uncle\u2019d on Casper and neither does chain reorganization happen on it. For more information on the execution process, see ",(0,o.kt)("a",{parentName:"li",href:"/design/execution-semantics"},"Execution Semantics"),"."),(0,o.kt)("li",{parentName:"ul"},"Exchanges can check finality signatures. Finality signatures are sent by validators after the finalized block is executed and global state is updated. The Casper node streams execution effects and finality signatures through an SSE architecture. For more information about various events, see ",(0,o.kt)("a",{parentName:"li",href:"/dapp-dev-guide/building-dapps/monitoring-events"},"Monitoring and Consuming Events"),".")))}f.isMDXComponent=!0}}]);